#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CDatos
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ClinicaGPV")]
	public partial class DataClinicaDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definiciones de métodos de extensibilidad
    partial void OnCreated();
    partial void InsertEspecialidades(Especialidades instance);
    partial void UpdateEspecialidades(Especialidades instance);
    partial void DeleteEspecialidades(Especialidades instance);
    partial void InsertIngresos(Ingresos instance);
    partial void UpdateIngresos(Ingresos instance);
    partial void DeleteIngresos(Ingresos instance);
    partial void InsertMedicos(Medicos instance);
    partial void UpdateMedicos(Medicos instance);
    partial void DeleteMedicos(Medicos instance);
    partial void InsertMedicosEspecialidades(MedicosEspecialidades instance);
    partial void UpdateMedicosEspecialidades(MedicosEspecialidades instance);
    partial void DeleteMedicosEspecialidades(MedicosEspecialidades instance);
    partial void InsertPacientes(Pacientes instance);
    partial void UpdatePacientes(Pacientes instance);
    partial void DeletePacientes(Pacientes instance);
    #endregion
		
		public DataClinicaDataContext() : 
				base(global::CDatos.Properties.Settings.Default.ClinicaGPVConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClinicaDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClinicaDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClinicaDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClinicaDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Especialidades> Especialidades
		{
			get
			{
				return this.GetTable<Especialidades>();
			}
		}
		
		public System.Data.Linq.Table<Ingresos> Ingresos
		{
			get
			{
				return this.GetTable<Ingresos>();
			}
		}
		
		public System.Data.Linq.Table<Medicos> Medicos
		{
			get
			{
				return this.GetTable<Medicos>();
			}
		}
		
		public System.Data.Linq.Table<MedicosEspecialidades> MedicosEspecialidades
		{
			get
			{
				return this.GetTable<MedicosEspecialidades>();
			}
		}
		
		public System.Data.Linq.Table<Pacientes> Pacientes
		{
			get
			{
				return this.GetTable<Pacientes>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ingresar_paciente")]
		public int ingresar_paciente([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string nombre, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string apellido, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(100)")] string direccion, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Char(5)")] string codigo_postal, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string provincia, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(12)")] string telefono, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> fecha_nacimiento)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, nombre, apellido, direccion, codigo_postal, provincia, telefono, fecha_nacimiento);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ingreso_especialidades")]
		public int ingreso_especialidades([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string especialidad)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), especialidad);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ingreso_medico_especialidades")]
		public int ingreso_medico_especialidades([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> especialidades_id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> medico_id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), especialidades_id, medico_id);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ingreso_medicos")]
		public int ingreso_medicos([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string nombre, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string apellidos, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(12)")] string telefono)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, nombre, apellidos, telefono);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.registro_ingreso")]
		public int registro_ingreso([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> paciente_ID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> habitacion, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Char(1)")] System.Nullable<char> cama, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTime")] System.Nullable<System.DateTime> fecha_ingreso)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), paciente_ID, habitacion, cama, fecha_ingreso);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Especialidades")]
	public partial class Especialidades : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EspecialidadID;
		
		private string _Especialidad;
		
		private EntitySet<MedicosEspecialidades> _MedicosEspecialidades;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEspecialidadIDChanging(int value);
    partial void OnEspecialidadIDChanged();
    partial void OnEspecialidadChanging(string value);
    partial void OnEspecialidadChanged();
    #endregion
		
		public Especialidades()
		{
			this._MedicosEspecialidades = new EntitySet<MedicosEspecialidades>(new Action<MedicosEspecialidades>(this.attach_MedicosEspecialidades), new Action<MedicosEspecialidades>(this.detach_MedicosEspecialidades));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EspecialidadID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EspecialidadID
		{
			get
			{
				return this._EspecialidadID;
			}
			set
			{
				if ((this._EspecialidadID != value))
				{
					this.OnEspecialidadIDChanging(value);
					this.SendPropertyChanging();
					this._EspecialidadID = value;
					this.SendPropertyChanged("EspecialidadID");
					this.OnEspecialidadIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Especialidad", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Especialidad
		{
			get
			{
				return this._Especialidad;
			}
			set
			{
				if ((this._Especialidad != value))
				{
					this.OnEspecialidadChanging(value);
					this.SendPropertyChanging();
					this._Especialidad = value;
					this.SendPropertyChanged("Especialidad");
					this.OnEspecialidadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Especialidades_MedicosEspecialidades", Storage="_MedicosEspecialidades", ThisKey="EspecialidadID", OtherKey="EspecialidadID")]
		public EntitySet<MedicosEspecialidades> MedicosEspecialidades
		{
			get
			{
				return this._MedicosEspecialidades;
			}
			set
			{
				this._MedicosEspecialidades.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MedicosEspecialidades(MedicosEspecialidades entity)
		{
			this.SendPropertyChanging();
			entity.Especialidades = this;
		}
		
		private void detach_MedicosEspecialidades(MedicosEspecialidades entity)
		{
			this.SendPropertyChanging();
			entity.Especialidades = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ingresos")]
	public partial class Ingresos : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NumIngreso;
		
		private int _PacienteID;
		
		private int _Habitacion;
		
		private char _Cama;
		
		private System.Nullable<System.DateTime> _FechaIngreso;
		
		private EntityRef<Pacientes> _Pacientes;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNumIngresoChanging(int value);
    partial void OnNumIngresoChanged();
    partial void OnPacienteIDChanging(int value);
    partial void OnPacienteIDChanged();
    partial void OnHabitacionChanging(int value);
    partial void OnHabitacionChanged();
    partial void OnCamaChanging(char value);
    partial void OnCamaChanged();
    partial void OnFechaIngresoChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaIngresoChanged();
    #endregion
		
		public Ingresos()
		{
			this._Pacientes = default(EntityRef<Pacientes>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumIngreso", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NumIngreso
		{
			get
			{
				return this._NumIngreso;
			}
			set
			{
				if ((this._NumIngreso != value))
				{
					this.OnNumIngresoChanging(value);
					this.SendPropertyChanging();
					this._NumIngreso = value;
					this.SendPropertyChanged("NumIngreso");
					this.OnNumIngresoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PacienteID", DbType="Int NOT NULL")]
		public int PacienteID
		{
			get
			{
				return this._PacienteID;
			}
			set
			{
				if ((this._PacienteID != value))
				{
					if (this._Pacientes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPacienteIDChanging(value);
					this.SendPropertyChanging();
					this._PacienteID = value;
					this.SendPropertyChanged("PacienteID");
					this.OnPacienteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Habitacion", DbType="Int NOT NULL")]
		public int Habitacion
		{
			get
			{
				return this._Habitacion;
			}
			set
			{
				if ((this._Habitacion != value))
				{
					this.OnHabitacionChanging(value);
					this.SendPropertyChanging();
					this._Habitacion = value;
					this.SendPropertyChanged("Habitacion");
					this.OnHabitacionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cama", DbType="Char(1) NOT NULL")]
		public char Cama
		{
			get
			{
				return this._Cama;
			}
			set
			{
				if ((this._Cama != value))
				{
					this.OnCamaChanging(value);
					this.SendPropertyChanging();
					this._Cama = value;
					this.SendPropertyChanged("Cama");
					this.OnCamaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FechaIngreso", DbType="DateTime")]
		public System.Nullable<System.DateTime> FechaIngreso
		{
			get
			{
				return this._FechaIngreso;
			}
			set
			{
				if ((this._FechaIngreso != value))
				{
					this.OnFechaIngresoChanging(value);
					this.SendPropertyChanging();
					this._FechaIngreso = value;
					this.SendPropertyChanged("FechaIngreso");
					this.OnFechaIngresoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pacientes_Ingresos", Storage="_Pacientes", ThisKey="PacienteID", OtherKey="PacienteID", IsForeignKey=true)]
		public Pacientes Pacientes
		{
			get
			{
				return this._Pacientes.Entity;
			}
			set
			{
				Pacientes previousValue = this._Pacientes.Entity;
				if (((previousValue != value) 
							|| (this._Pacientes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pacientes.Entity = null;
						previousValue.Ingresos.Remove(this);
					}
					this._Pacientes.Entity = value;
					if ((value != null))
					{
						value.Ingresos.Add(this);
						this._PacienteID = value.PacienteID;
					}
					else
					{
						this._PacienteID = default(int);
					}
					this.SendPropertyChanged("Pacientes");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Medicos")]
	public partial class Medicos : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MedicoID;
		
		private string _Nombre;
		
		private string _Apellidos;
		
		private string _Telefono;
		
		private EntitySet<MedicosEspecialidades> _MedicosEspecialidades;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMedicoIDChanging(int value);
    partial void OnMedicoIDChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnApellidosChanging(string value);
    partial void OnApellidosChanged();
    partial void OnTelefonoChanging(string value);
    partial void OnTelefonoChanged();
    #endregion
		
		public Medicos()
		{
			this._MedicosEspecialidades = new EntitySet<MedicosEspecialidades>(new Action<MedicosEspecialidades>(this.attach_MedicosEspecialidades), new Action<MedicosEspecialidades>(this.detach_MedicosEspecialidades));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicoID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MedicoID
		{
			get
			{
				return this._MedicoID;
			}
			set
			{
				if ((this._MedicoID != value))
				{
					this.OnMedicoIDChanging(value);
					this.SendPropertyChanging();
					this._MedicoID = value;
					this.SendPropertyChanged("MedicoID");
					this.OnMedicoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nombre", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Apellidos", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Apellidos
		{
			get
			{
				return this._Apellidos;
			}
			set
			{
				if ((this._Apellidos != value))
				{
					this.OnApellidosChanging(value);
					this.SendPropertyChanging();
					this._Apellidos = value;
					this.SendPropertyChanged("Apellidos");
					this.OnApellidosChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Telefono", DbType="VarChar(12) NOT NULL", CanBeNull=false)]
		public string Telefono
		{
			get
			{
				return this._Telefono;
			}
			set
			{
				if ((this._Telefono != value))
				{
					this.OnTelefonoChanging(value);
					this.SendPropertyChanging();
					this._Telefono = value;
					this.SendPropertyChanged("Telefono");
					this.OnTelefonoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medicos_MedicosEspecialidades", Storage="_MedicosEspecialidades", ThisKey="MedicoID", OtherKey="MedicoID")]
		public EntitySet<MedicosEspecialidades> MedicosEspecialidades
		{
			get
			{
				return this._MedicosEspecialidades;
			}
			set
			{
				this._MedicosEspecialidades.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MedicosEspecialidades(MedicosEspecialidades entity)
		{
			this.SendPropertyChanging();
			entity.Medicos = this;
		}
		
		private void detach_MedicosEspecialidades(MedicosEspecialidades entity)
		{
			this.SendPropertyChanging();
			entity.Medicos = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MedicosEspecialidades")]
	public partial class MedicosEspecialidades : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EspecialidadID;
		
		private int _MedicoID;
		
		private EntityRef<Especialidades> _Especialidades;
		
		private EntityRef<Medicos> _Medicos;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEspecialidadIDChanging(int value);
    partial void OnEspecialidadIDChanged();
    partial void OnMedicoIDChanging(int value);
    partial void OnMedicoIDChanged();
    #endregion
		
		public MedicosEspecialidades()
		{
			this._Especialidades = default(EntityRef<Especialidades>);
			this._Medicos = default(EntityRef<Medicos>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EspecialidadID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EspecialidadID
		{
			get
			{
				return this._EspecialidadID;
			}
			set
			{
				if ((this._EspecialidadID != value))
				{
					if (this._Especialidades.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEspecialidadIDChanging(value);
					this.SendPropertyChanging();
					this._EspecialidadID = value;
					this.SendPropertyChanged("EspecialidadID");
					this.OnEspecialidadIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicoID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MedicoID
		{
			get
			{
				return this._MedicoID;
			}
			set
			{
				if ((this._MedicoID != value))
				{
					if (this._Medicos.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMedicoIDChanging(value);
					this.SendPropertyChanging();
					this._MedicoID = value;
					this.SendPropertyChanged("MedicoID");
					this.OnMedicoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Especialidades_MedicosEspecialidades", Storage="_Especialidades", ThisKey="EspecialidadID", OtherKey="EspecialidadID", IsForeignKey=true)]
		public Especialidades Especialidades
		{
			get
			{
				return this._Especialidades.Entity;
			}
			set
			{
				Especialidades previousValue = this._Especialidades.Entity;
				if (((previousValue != value) 
							|| (this._Especialidades.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Especialidades.Entity = null;
						previousValue.MedicosEspecialidades.Remove(this);
					}
					this._Especialidades.Entity = value;
					if ((value != null))
					{
						value.MedicosEspecialidades.Add(this);
						this._EspecialidadID = value.EspecialidadID;
					}
					else
					{
						this._EspecialidadID = default(int);
					}
					this.SendPropertyChanged("Especialidades");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medicos_MedicosEspecialidades", Storage="_Medicos", ThisKey="MedicoID", OtherKey="MedicoID", IsForeignKey=true)]
		public Medicos Medicos
		{
			get
			{
				return this._Medicos.Entity;
			}
			set
			{
				Medicos previousValue = this._Medicos.Entity;
				if (((previousValue != value) 
							|| (this._Medicos.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Medicos.Entity = null;
						previousValue.MedicosEspecialidades.Remove(this);
					}
					this._Medicos.Entity = value;
					if ((value != null))
					{
						value.MedicosEspecialidades.Add(this);
						this._MedicoID = value.MedicoID;
					}
					else
					{
						this._MedicoID = default(int);
					}
					this.SendPropertyChanged("Medicos");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Pacientes")]
	public partial class Pacientes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PacienteID;
		
		private string _Nombre;
		
		private string _Apellidos;
		
		private string _Dirección;
		
		private string _CodigoPostal;
		
		private string _Provincia;
		
		private string _Telefono;
		
		private System.Nullable<System.DateTime> _FechaNacimiento;
		
		private EntitySet<Ingresos> _Ingresos;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPacienteIDChanging(int value);
    partial void OnPacienteIDChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnApellidosChanging(string value);
    partial void OnApellidosChanged();
    partial void OnDirecciónChanging(string value);
    partial void OnDirecciónChanged();
    partial void OnCodigoPostalChanging(string value);
    partial void OnCodigoPostalChanged();
    partial void OnProvinciaChanging(string value);
    partial void OnProvinciaChanged();
    partial void OnTelefonoChanging(string value);
    partial void OnTelefonoChanged();
    partial void OnFechaNacimientoChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaNacimientoChanged();
    #endregion
		
		public Pacientes()
		{
			this._Ingresos = new EntitySet<Ingresos>(new Action<Ingresos>(this.attach_Ingresos), new Action<Ingresos>(this.detach_Ingresos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PacienteID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PacienteID
		{
			get
			{
				return this._PacienteID;
			}
			set
			{
				if ((this._PacienteID != value))
				{
					this.OnPacienteIDChanging(value);
					this.SendPropertyChanging();
					this._PacienteID = value;
					this.SendPropertyChanged("PacienteID");
					this.OnPacienteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nombre", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Apellidos", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Apellidos
		{
			get
			{
				return this._Apellidos;
			}
			set
			{
				if ((this._Apellidos != value))
				{
					this.OnApellidosChanging(value);
					this.SendPropertyChanging();
					this._Apellidos = value;
					this.SendPropertyChanged("Apellidos");
					this.OnApellidosChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dirección", DbType="VarChar(100)")]
		public string Dirección
		{
			get
			{
				return this._Dirección;
			}
			set
			{
				if ((this._Dirección != value))
				{
					this.OnDirecciónChanging(value);
					this.SendPropertyChanging();
					this._Dirección = value;
					this.SendPropertyChanged("Dirección");
					this.OnDirecciónChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodigoPostal", DbType="Char(5) NOT NULL", CanBeNull=false)]
		public string CodigoPostal
		{
			get
			{
				return this._CodigoPostal;
			}
			set
			{
				if ((this._CodigoPostal != value))
				{
					this.OnCodigoPostalChanging(value);
					this.SendPropertyChanging();
					this._CodigoPostal = value;
					this.SendPropertyChanged("CodigoPostal");
					this.OnCodigoPostalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Provincia", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Provincia
		{
			get
			{
				return this._Provincia;
			}
			set
			{
				if ((this._Provincia != value))
				{
					this.OnProvinciaChanging(value);
					this.SendPropertyChanging();
					this._Provincia = value;
					this.SendPropertyChanged("Provincia");
					this.OnProvinciaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Telefono", DbType="VarChar(12)")]
		public string Telefono
		{
			get
			{
				return this._Telefono;
			}
			set
			{
				if ((this._Telefono != value))
				{
					this.OnTelefonoChanging(value);
					this.SendPropertyChanging();
					this._Telefono = value;
					this.SendPropertyChanged("Telefono");
					this.OnTelefonoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FechaNacimiento", DbType="Date")]
		public System.Nullable<System.DateTime> FechaNacimiento
		{
			get
			{
				return this._FechaNacimiento;
			}
			set
			{
				if ((this._FechaNacimiento != value))
				{
					this.OnFechaNacimientoChanging(value);
					this.SendPropertyChanging();
					this._FechaNacimiento = value;
					this.SendPropertyChanged("FechaNacimiento");
					this.OnFechaNacimientoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pacientes_Ingresos", Storage="_Ingresos", ThisKey="PacienteID", OtherKey="PacienteID")]
		public EntitySet<Ingresos> Ingresos
		{
			get
			{
				return this._Ingresos;
			}
			set
			{
				this._Ingresos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ingresos(Ingresos entity)
		{
			this.SendPropertyChanging();
			entity.Pacientes = this;
		}
		
		private void detach_Ingresos(Ingresos entity)
		{
			this.SendPropertyChanging();
			entity.Pacientes = null;
		}
	}
}
#pragma warning restore 1591
